Manipular multiplas requisições em paralelo

Para manipular varias requisições usamos o Promise.all()
Colocamos dentro da promise as requisições que queremos fazer

const pokeApi = {}

pokeApi.getPokemonDetail = (pokemon) => {
  return fetch((pokemon.url)).then((response) => response.json())
}

pokeApi.getPokemons = (offset = 0, limit = 5) => {
  const url = `https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=${limit}`

  return fetch(url)
  .then((response) => response.json())
  .then((jsonBody) => jsonBody.results)
  .then((pokemons) => pokemons.map(pokeApi.getPokemonDetail))
  .then((detailsRequest) => Promise.all(detailsRequest)) <- juntando as promises encadeadas
  .then((pokemonDetails) => pokemonDetails)
  .catch(error => console.log(error))
}

Para usar as promises retirnadas basta dar um map() no objeto que deseja retornar

function convertPokemonTypes(pokemonType){
  return pokemonType.map((type) => `<li class="type">${type.type.name}</li>`)
}

function convertPokemonToHtml(pokemon) {
  return `
  <li class="pokemon">
    <span class="number">#001</span>
    <span class="name">${pokemon.name}</span>
    <div class="detail">
      <ol class="types">
        ${convertPokemonTypes(pokemon.types).join('')}
      </ol>
      <img src="${pokemon.sprites.other.dream_world.front_default}"
        alt="${pokemon.name}">
    </div>
  </li>
  `
}

const pokemonListHtml = document.querySelector('#pokemonList')
  pokeApi.getPokemons().then((pokemons = []) => {
    
    const newItem = pokemons.map((pokemon) => {
      return convertPokemonToHtml(pokemon)
    })
    
    const newHtml = newItem.join('')

    pokemonListHtml.innerHTML += newHtml
  })
